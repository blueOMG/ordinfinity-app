import{O as y,v as h,x as v,E as m,m as L,k as O,y as w,z as C,i as G}from"./tsparticles-engine.e4b9023d.js";class E{constructor(){this.blink=!1,this.consent=!1,this.opacity=1}load(n){n&&(n.blink!==void 0&&(this.blink=n.blink),n.color!==void 0&&(this.color=y.create(this.color,n.color)),n.consent!==void 0&&(this.consent=n.consent),n.opacity!==void 0&&(this.opacity=n.opacity))}}class x{constructor(){this.distance=100,this.links=new E}get lineLinked(){return this.links}set lineLinked(n){this.links=n}get line_linked(){return this.links}set line_linked(n){this.links=n}load(n){n&&(n.distance!==void 0&&(this.distance=n.distance),this.links.load(n.links??n.lineLinked??n.line_linked))}}function D(t,n,e,i,o,s){h(t,e,i),t.strokeStyle=v(o,s),t.lineWidth=n,t.stroke()}function I(t,n,e,i,o){t.canvas.draw(s=>{const a=n.getPosition();D(s,n.retina.linksWidth??0,a,o,e,i)})}class M extends m{constructor(n){super(n)}clear(){}init(){const n=this.container,e=n.actualOptions.interactivity.modes.grab;e&&(n.retina.grabModeDistance=e.distance*n.retina.pixelRatio)}async interact(){var c;const n=this.container,e=n.actualOptions,i=e.interactivity;if(!i.modes.grab||!i.events.onHover.enable||n.interactivity.status!==L)return;const o=n.interactivity.mouse.position;if(!o)return;const s=n.retina.grabModeDistance;if(!s||s<0)return;const a=n.particles.quadTree.queryCircle(o,s,r=>this.isEnabled(r));for(const r of a){const p=r.getPosition(),l=O(p,o);if(l>s)continue;const d=i.modes.grab.links,u=d.opacity,b=u-l*u/s;if(b<=0)continue;const f=d.color??((c=r.options.links)==null?void 0:c.color);if(!n.particles.grabLineColor&&f){const g=i.modes.grab.links;n.particles.grabLineColor=w(f,g.blink,g.consent)}const k=C(r,void 0,n.particles.grabLineColor);k&&I(n,r,k,b,o)}}isEnabled(n){const e=this.container,i=e.interactivity.mouse,o=((n==null?void 0:n.interactivity)??e.actualOptions.interactivity).events;return o.onHover.enable&&!!i.position&&G("grab",o.onHover.mode)}loadModeOptions(n,...e){n.grab||(n.grab=new x);for(const i of e)n.grab.load(i==null?void 0:i.grab)}reset(){}}async function q(t){await t.addInteractor("externalGrab",n=>new M(n))}export{q as l};
