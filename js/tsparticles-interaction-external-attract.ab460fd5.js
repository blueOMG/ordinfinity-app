import{E as k,C as p,g as x,c as g,a as A,V as M,m as b,i as d}from"./tsparticles-engine.e4b9023d.js";class E{constructor(){this.distance=200,this.duration=.4,this.easing="ease-out-quad",this.factor=1,this.maxSpeed=50,this.speed=1}load(t){t&&(t.distance!==void 0&&(this.distance=t.distance),t.duration!==void 0&&(this.duration=t.duration),t.easing!==void 0&&(this.easing=t.easing),t.factor!==void 0&&(this.factor=t.factor),t.maxSpeed!==void 0&&(this.maxSpeed=t.maxSpeed),t.speed!==void 0&&(this.speed=t.speed))}}class _ extends k{constructor(t,e){super(e),this._clickAttract=()=>{const a=this.container;a.attract||(a.attract={particles:[]});const{attract:i}=a;if(i.finish||(i.count||(i.count=0),i.count++,i.count===a.particles.count&&(i.finish=!0)),i.clicking){const c=a.interactivity.mouse.clickPosition,s=a.retina.attractModeDistance;if(!s||s<0||!c)return;this._processAttract(c,s,new p(c.x,c.y,s))}else i.clicking===!1&&(i.particles=[])},this._hoverAttract=()=>{const a=this.container,i=a.interactivity.mouse.position,c=a.retina.attractModeDistance;!c||c<0||!i||this._processAttract(i,c,new p(i.x,i.y,c))},this._processAttract=(a,i,c)=>{const s=this.container,n=s.actualOptions.interactivity.modes.attract;if(!n)return;const u=s.particles.quadTree.query(c,l=>this.isEnabled(l));for(const l of u){const{dx:v,dy:m,distance:r}=x(l.position,a),f=n.speed*n.factor,h=g(A(n.easing)(1-r/i)*f,0,n.maxSpeed),y=M.create(r===0?f:v/r*h,r===0?f:m/r*h);l.position.subFrom(y)}},this._engine=t,e.attract||(e.attract={particles:[]}),this.handleClickMode=a=>{const i=this.container.actualOptions,c=i.interactivity.modes.attract;if(!(!c||a!=="attract")){e.attract||(e.attract={particles:[]}),e.attract.clicking=!0,e.attract.count=0;for(const s of e.attract.particles)this.isEnabled(s)&&s.velocity.setTo(s.initialVelocity);e.attract.particles=[],e.attract.finish=!1,setTimeout(()=>{e.destroyed||(e.attract||(e.attract={particles:[]}),e.attract.clicking=!1)},c.duration*1e3)}}}clear(){}init(){const t=this.container,e=t.actualOptions.interactivity.modes.attract;e&&(t.retina.attractModeDistance=e.distance*t.retina.pixelRatio)}async interact(){const t=this.container,e=t.actualOptions,a=t.interactivity.status===b,i=e.interactivity.events,c=i.onHover.enable,s=i.onHover.mode,n=i.onClick.enable,u=i.onClick.mode;a&&c&&d("attract",s)?this._hoverAttract():n&&d("attract",u)&&this._clickAttract()}isEnabled(t){const e=this.container,a=e.actualOptions,i=e.interactivity.mouse,c=((t==null?void 0:t.interactivity)??a.interactivity).events;if((!i.position||!c.onHover.enable)&&(!i.clickPosition||!c.onClick.enable))return!1;const s=c.onHover.mode,n=c.onClick.mode;return d("attract",s)||d("attract",n)}loadModeOptions(t,...e){t.attract||(t.attract=new E);for(const a of e)t.attract.load(a==null?void 0:a.attract)}reset(){}}async function O(o){await o.addInteractor("externalAttract",t=>new _(o,t))}export{O as l};
