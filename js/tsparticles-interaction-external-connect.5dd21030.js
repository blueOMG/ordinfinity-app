import{v as g,s as k,w as f,x as v,E as p,i as M}from"./tsparticles-engine.e4b9023d.js";class m{constructor(){this.opacity=.5}load(n){n&&n.opacity!==void 0&&(this.opacity=n.opacity)}}class C{constructor(){this.distance=80,this.links=new m,this.radius=60}get lineLinked(){return this.links}set lineLinked(n){this.links=n}get line_linked(){return this.links}set line_linked(n){this.links=n}load(n){n&&(n.distance!==void 0&&(this.distance=n.distance),this.links.load(n.links??n.lineLinked??n.line_linked),n.radius!==void 0&&(this.radius=n.radius))}}function R(e,n,t,i){const o=Math.floor(t.getRadius()/n.getRadius()),s=n.getFillColor(),r=t.getFillColor();if(!s||!r)return;const c=n.getPosition(),d=t.getPosition(),l=k(s,r,n.getRadius(),t.getRadius()),a=e.createLinearGradient(c.x,c.y,d.x,d.y);return a.addColorStop(0,f(s,i)),a.addColorStop(o>1?1:o,v(l,i)),a.addColorStop(1,f(r,i)),a}function x(e,n,t,i,o){g(e,i,o),e.lineWidth=n,e.strokeStyle=t,e.stroke()}function b(e,n,t,i){const o=e.actualOptions,s=o.interactivity.modes.connect;if(s)return R(n,t,i,s.links.opacity)}function w(e,n,t){e.canvas.draw(i=>{const o=b(e,i,n,t);if(!o)return;const s=n.getPosition(),r=t.getPosition();x(i,n.retina.linksWidth??0,o,s,r)})}class P extends p{constructor(n){super(n)}clear(){}init(){const n=this.container,t=n.actualOptions.interactivity.modes.connect;t&&(n.retina.connectModeDistance=t.distance*n.retina.pixelRatio,n.retina.connectModeRadius=t.radius*n.retina.pixelRatio)}async interact(){const n=this.container;if(n.actualOptions.interactivity.events.onHover.enable&&n.interactivity.status==="pointermove"){const i=n.interactivity.mouse.position;if(!n.retina.connectModeDistance||n.retina.connectModeDistance<0||!n.retina.connectModeRadius||n.retina.connectModeRadius<0||!i)return;const o=Math.abs(n.retina.connectModeRadius),s=n.particles.quadTree.queryCircle(i,o,c=>this.isEnabled(c));let r=0;for(const c of s){const d=c.getPosition();for(const l of s.slice(r+1)){const a=l.getPosition(),u=Math.abs(n.retina.connectModeDistance),y=Math.abs(d.x-a.x),h=Math.abs(d.y-a.y);y<u&&h<u&&w(n,c,l)}++r}}}isEnabled(n){const t=this.container,i=t.interactivity.mouse,o=((n==null?void 0:n.interactivity)??t.actualOptions.interactivity).events;return o.onHover.enable&&i.position?M("connect",o.onHover.mode):!1}loadModeOptions(n,...t){n.connect||(n.connect=new C);for(const i of t)n.connect.load(i==null?void 0:i.connect)}reset(){}}async function L(e){await e.addInteractor("externalConnect",n=>new P(n))}export{L as l};
