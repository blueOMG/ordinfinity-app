import{O as h,A as g,I as O,B as b,p as T,w as q}from"./tsparticles-engine.e4b9023d.js";class p{constructor(){this.enable=!1,this.frequency=.05,this.opacity=1}load(e){e&&(e.color!==void 0&&(this.color=h.create(this.color,e.color)),e.enable!==void 0&&(this.enable=e.enable),e.frequency!==void 0&&(this.frequency=e.frequency),e.opacity!==void 0&&(this.opacity=g(e.opacity)))}}class x{constructor(){this.lines=new p,this.particles=new p}load(e){e&&(this.lines.load(e.lines),this.particles.load(e.particles))}}class R{getColorStyles(e,t,n,u){const w=e.options,r=w.twinkle;if(!r)return{};const l=r.particles,a=l.enable&&O()<l.frequency,d=e.options.zIndex,k=(1-e.zIndexFactor)**d.opacityRate,y=a?b(l.opacity)*k:u,c=T(l.color),s=c?q(c,y):void 0,o={},f=a&&s;return o.fill=f?s:void 0,o.stroke=f?s:void 0,o}init(){}isEnabled(e){const t=e.options,n=t.twinkle;return n?n.particles.enable:!1}loadOptions(e,...t){e.twinkle||(e.twinkle=new x);for(const n of t)e.twinkle.load(n==null?void 0:n.twinkle)}update(){}}async function z(i){await i.addParticleUpdater("twinkle",()=>new R)}export{z as l};
